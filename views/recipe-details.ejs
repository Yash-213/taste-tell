<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title><%= recipe.title %> - Taste & Tell</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">

  <link rel="stylesheet" href="/css/style.css">
</head>

<body>
  <div class="container my-5">

    <div class="row g-4">
      <div class="col-md-5">
        <img src="<%= recipe.imageUrl || 'https://via.placeholder.com/600x400?text=No+Image' %>"
          class="img-fluid rounded shadow" alt="<%= recipe.title %>">
      </div>
      <div class="col-md-7">
        <h1 class="mb-3"><%= recipe.title %></h1>

        <p>
          <strong>Category:</strong>
          <span class="badge bg-primary"><%= recipe.category %></span>
        </p>

        <% if (recipe.tags && recipe.tags.length) { %>
          <p>
            <strong>Tags:</strong>
            <% recipe.tags.forEach(tag => { %>
              <span class="badge bg-secondary me-1"><%= tag %></span>
            <% }) %>
          </p>
        <% } %>

        <!-- Average Rating -->
        <div class="mb-3">
          <strong>Rating:</strong>
          <span id="avgStars" class="text-warning fs-4">
            <% for (let i=1; i <=5; i++) { %>
              <i class="bi <%= i <= Math.round(avgRating) ? 'bi-star-fill' : 'bi-star' %>"></i>
            <% } %>
          </span>
          <span id="avgMeta"> (<%= avgRating %>/5) {<%= totalRatings %> ratings}</span>
        </div>

        <!-- User Rating -->
        <% if (userId) { %>
          <div class="mt-2">
            <strong>Your Rating:</strong>
            <span id="rateStars" class="text-warning fs-3" style="cursor:pointer;">
              <% for (let i=1; i <=5; i++) { %>
                <i class="bi <%= (userRating && i <= userRating) ? 'bi-star-fill' : 'bi-star' %>" data-value="<%= i %>"></i>
              <% } %>
            </span>
          </div>
        <% } else { %>
          <p class="text-muted mt-2">Login to rate this recipe</p>
        <% } %>

        <hr>

        <h4>Ingredients</h4>
        <ul>
          <% recipe.ingredients.forEach(i => { %>
            <li><%= i %></li>
          <% }) %>
        </ul>

        <h4>Procedure</h4>
        <ol>
          <% recipe.instructions.forEach(step => { %>
            <li><%= step %></li>
          <% }) %>
        </ol>

        <a href="/" class="btn btn-outline-dark mt-3"><i class="bi bi-arrow-left"></i> Back to Recipes</a>
      </div>
    </div>

    <hr class="my-5">

    <!-- Comments -->
    <div class="row">
      <div class="col-lg-8">
        <h4 class="mb-3">Comments</h4>
        <ul id="commentList" class="list-group mb-3">
          <% comments.forEach(c => { %>
            <li class="list-group-item d-flex justify-content-between align-items-start">
              <div>
                <%= c.comment %>
                <small class="text-muted d-block mt-1"><%= new Date(c.date).toDateString() %></small>
              </div>
              <% if (String(c.userId) === String(userId)) { %>
                <button class="btn btn-sm btn-danger delete-comment" data-id="<%= c._id %>">Delete</button>
              <% } %>
            </li>
          <% }) %>
        </ul>

        <% if (userId) { %>
          <div class="input-group">
            <textarea id="commentText" class="form-control border-0 border-bottom rounded-0 shadow-none"
              placeholder="Write a comment..."></textarea>
            <button id="submitComment" class="btn btn-primary ms-2"><i class="bi bi-send"></i> Post</button>
          </div>
        <% } else { %>
          <p class="text-muted">Login to comment</p>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    const recipeId = "<%= recipe._id %>";
    const userId = "<%= userId || '' %>";

    // Handle rating
    document.querySelectorAll('#rateStars i').forEach(star => {
      star.addEventListener('click', async () => {
        const rating = star.dataset.value;
        try {
          const res = await fetch(`/api/recipes/${recipeId}/rate`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ rating })
          });
          const data = await res.json();
          if (res.ok) {
            updateStars(data.userRating, data.avgRating, data.totalRatings);
          } else {
            alert(data.message || "Error while rating");
          }
        } catch (err) {
          console.error(err);
          alert("Network error while rating");
        }
      });
    });

    // Handle comment submit
    document.getElementById("submitComment")?.addEventListener("click", async () => {
      const text = document.getElementById("commentText").value.trim();
      if (!text) return alert("Comment cannot be empty.");

      try {
        const res = await fetch(`/api/recipes/${recipeId}/comment`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ comment: text })
        });
        const data = await res.json();
        if (res.ok && data.success) {
          const li = document.createElement("li");
          li.className = "list-group-item d-flex justify-content-between align-items-start";
          li.innerHTML = `<div>${data.comment.text}<small class="text-muted d-block mt-1">${new Date(data.comment.date).toDateString()}</small></div>
                          <button class="btn btn-sm btn-danger delete-comment" data-id="${data.comment._id}">Delete</button>`;
          document.getElementById("commentList").appendChild(li);
          document.getElementById("commentText").value = "";
        } else {
          alert(data.message || "Error while commenting");
        }
      } catch (err) {
        console.error(err);
        alert("Network error while posting comment");
      }
    });

    // Handle delete comment
    document.addEventListener("click", async (e) => {
      if (e.target.classList.contains("delete-comment")) {
        const commentId = e.target.dataset.id;
        try {
          const res = await fetch(`/api/recipes/${recipeId}/comment/${commentId}`, {
            method: "DELETE"
          });
          const data = await res.json();
          if (res.ok && data.success) {
            e.target.closest("li").remove();
          } else {
            alert(data.message || "Error while deleting");
          }
        } catch (err) {
          console.error(err);
          alert("Network error while deleting comment");
        }
      }
    });

    // Update star UI
    function updateStars(userRating, avgRating, totalRatings) {
      let html = "";
      for (let i = 1; i <= 5; i++) {
        html += `<i class="bi ${i <= userRating ? 'bi-star-fill' : 'bi-star'}"></i>`;
      }
      document.getElementById("rateStars").innerHTML = html;

      let avgHtml = "";
      for (let i = 1; i <= 5; i++) {
        avgHtml += `<i class="bi ${i <= Math.round(avgRating) ? 'bi-star-fill' : 'bi-star'}"></i>`;
      }
      document.getElementById("avgStars").innerHTML = avgHtml;
      document.getElementById("avgMeta").textContent = ` (${avgRating}/5) {${totalRatings} ratings}`;
    }
  </script>
</body>
</html>